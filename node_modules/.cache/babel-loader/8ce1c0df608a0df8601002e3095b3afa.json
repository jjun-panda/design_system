{"ast":null,"code":"import { useGetManyAggregate } from '../dataProvider';\n/**\n * @typedef UseReferenceResult\n * @type {Object}\n * @property {boolean} isFetching: boolean indicating if the reference is loading\n * @property {boolean} isLoading: boolean indicating if the reference has loaded at least once\n * @property {Object} referenceRecord: the referenced record.\n */\n/**\n * Fetch reference record, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { isLoading, referenceRecord } = useReference({\n *     id: 7,\n *     reference: 'users',\n * });\n *\n * @param {Object} option\n * @param {string} option.reference The linked resource name\n * @param {string} option.id The id of the reference\n *\n * @returns {UseReferenceResult} The reference record\n */\nexport var useReference = function (_a) {\n  var reference = _a.reference,\n    id = _a.id,\n    options = _a.options;\n  var _b = useGetManyAggregate(reference, {\n      ids: [id]\n    }, options),\n    data = _b.data,\n    error = _b.error,\n    isLoading = _b.isLoading,\n    isFetching = _b.isFetching,\n    refetch = _b.refetch;\n  return {\n    referenceRecord: error ? undefined : data ? data[0] : undefined,\n    refetch: refetch,\n    error: error,\n    isLoading: isLoading,\n    isFetching: isFetching\n  };\n};","map":{"version":3,"mappings":"AACA,SAA8BA,mBAAmB,QAAQ,iBAAiB;AAiB1E;;;;;;;AAQA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMC,YAAY,GAAG,UAAoCC,EAIhC;MAH5BC,SAAS;IACTC,EAAE;IACFC,OAAO;EAED,SAAkDL,mBAAmB,CAEzEG,SAAS,EAAE;MAAEG,GAAG,EAAE,CAACF,EAAE;IAAC,CAAE,EAAEC,OAAO,CAAC;IAF5BE,IAAI;IAAEC,KAAK;IAAEC,SAAS;IAAEC,UAAU;IAAEC,OAAO,aAEf;EACpC,OAAO;IACHC,eAAe,EAAEJ,KAAK,GAAGK,SAAS,GAAGN,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGM,SAAS;IAC/DF,OAAO;IACPH,KAAK;IACLC,SAAS;IACTC,UAAU;GACb;AACL,CAAC","names":["useGetManyAggregate","useReference","_a","reference","id","options","ids","data","error","isLoading","isFetching","refetch","referenceRecord","undefined"],"sources":["/Users/jjun/design_system/node_modules/ra-core/src/controller/useReference.ts"],"sourcesContent":["import { RaRecord, Identifier } from '../types';\nimport { UseGetManyHookValue, useGetManyAggregate } from '../dataProvider';\nimport { UseQueryOptions } from 'react-query';\n\ninterface UseReferenceProps<RecordType extends RaRecord = any> {\n    id: Identifier;\n    reference: string;\n    options?: UseQueryOptions<RecordType[], Error>;\n}\n\nexport interface UseReferenceResult<RecordType extends RaRecord = any> {\n    isLoading: boolean;\n    isFetching: boolean;\n    referenceRecord?: RecordType;\n    error?: any;\n    refetch: UseGetManyHookValue<RecordType>['refetch'];\n}\n\n/**\n * @typedef UseReferenceResult\n * @type {Object}\n * @property {boolean} isFetching: boolean indicating if the reference is loading\n * @property {boolean} isLoading: boolean indicating if the reference has loaded at least once\n * @property {Object} referenceRecord: the referenced record.\n */\n\n/**\n * Fetch reference record, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { isLoading, referenceRecord } = useReference({\n *     id: 7,\n *     reference: 'users',\n * });\n *\n * @param {Object} option\n * @param {string} option.reference The linked resource name\n * @param {string} option.id The id of the reference\n *\n * @returns {UseReferenceResult} The reference record\n */\nexport const useReference = <RecordType extends RaRecord = any>({\n    reference,\n    id,\n    options,\n}: UseReferenceProps<RecordType>): UseReferenceResult<RecordType> => {\n    const { data, error, isLoading, isFetching, refetch } = useGetManyAggregate<\n        RecordType\n    >(reference, { ids: [id] }, options);\n    return {\n        referenceRecord: error ? undefined : data ? data[0] : undefined,\n        refetch,\n        error,\n        isLoading,\n        isFetching,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}