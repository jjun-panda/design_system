{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nimport * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\nimport { TextInput } from './TextInput';\nexport var SearchInput = function SearchInput(props) {\n  var translate = useTranslate();\n  if (props.label) {\n    throw new Error(\"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\");\n  }\n  return React.createElement(StyledTextInput, __assign({\n    hiddenLabel: true,\n    label: \"\",\n    resettable: true,\n    placeholder: translate('ra.action.search'),\n    InputProps: {\n      endAdornment: React.createElement(InputAdornment, {\n        position: \"end\"\n      }, React.createElement(SearchIcon, {\n        color: \"disabled\"\n      }))\n    },\n    size: \"small\"\n  }, props));\n};\nvar PREFIX = 'RaSearchInput';\nvar StyledTextInput = styled(TextInput, {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})({\n  marginTop: 0\n});","map":{"version":3,"mappings":";;;;;;;;;;;;AAAA,OAAO,KAAKA,KAAK,MAAM,OAAO;AAC9B,SAASC,MAAM,QAAQ,sBAAsB;AAC7C,OAAOC,UAAU,MAAM,4BAA4B;AACnD,SAASC,cAAc,QAAQ,eAAe;AAC9C,SAASC,YAAY,QAAQ,SAAS;AAGtC,SAASC,SAAS,QAAwB,aAAa;AAEvD,OAAO,IAAMC,WAAW,GAAG,SAAdA,WAAW,CAAIC,KAAuB;EAC/C,IAAMC,SAAS,GAAGJ,YAAY,EAAE;EAEhC,IAAIG,KAAK,CAACE,KAAK,EAAE;IACb,MAAM,IAAIC,KAAK,CACX,iGAAiG,CACpG;;EAGL,OACIV,oBAACW,eAAe;IACZC,WAAW;IACXH,KAAK,EAAC,EAAE;IACRI,UAAU;IACVC,WAAW,EAAEN,SAAS,CAAC,kBAAkB,CAAC;IAC1CO,UAAU,EAAE;MACRC,YAAY,EACRhB,oBAACG,cAAc;QAACc,QAAQ,EAAC;MAAK,GAC1BjB,oBAACE,UAAU;QAACgB,KAAK,EAAC;MAAU,EAAG;KAG1C;IACDC,IAAI,EAAC;EAAO,GACRZ,KAAK,EACX;AAEV,CAAC;AAID,IAAMa,MAAM,GAAG,eAAe;AAE9B,IAAMT,eAAe,GAAGV,MAAM,CAACI,SAAS,EAAE;EACtCgB,IAAI,EAAED,MAAM;EACZE,iBAAiB,EAAE,2BAACf,KAAK,EAAEgB,MAAM;IAAK,aAAM,CAACC,IAAI;EAAX;CACzC,CAAC,CAAC;EACCC,SAAS,EAAE;CACd,CAAC","names":["React","styled","SearchIcon","InputAdornment","useTranslate","TextInput","SearchInput","props","translate","label","Error","StyledTextInput","hiddenLabel","resettable","placeholder","InputProps","endAdornment","position","color","size","PREFIX","name","overridesResolver","styles","root","marginTop"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/input/SearchInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport { styled } from '@mui/material/styles';\nimport SearchIcon from '@mui/icons-material/Search';\nimport { InputAdornment } from '@mui/material';\nimport { useTranslate } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { TextInput, TextInputProps } from './TextInput';\n\nexport const SearchInput = (props: SearchInputProps) => {\n    const translate = useTranslate();\n\n    if (props.label) {\n        throw new Error(\n            \"<SearchInput> isn't designed to be used with a label prop. Use <TextInput> if you need a label.\"\n        );\n    }\n\n    return (\n        <StyledTextInput\n            hiddenLabel\n            label=\"\"\n            resettable\n            placeholder={translate('ra.action.search')}\n            InputProps={{\n                endAdornment: (\n                    <InputAdornment position=\"end\">\n                        <SearchIcon color=\"disabled\" />\n                    </InputAdornment>\n                ),\n            }}\n            size=\"small\"\n            {...props}\n        />\n    );\n};\n\nexport type SearchInputProps = CommonInputProps & TextInputProps;\n\nconst PREFIX = 'RaSearchInput';\n\nconst StyledTextInput = styled(TextInput, {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})({\n    marginTop: 0,\n});\n"]},"metadata":{},"sourceType":"module"}