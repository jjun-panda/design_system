{"ast":null,"code":"import get from 'lodash/get';\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\n/**\n * Fetch a reference record in a one-to-one relationship, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { data, isLoading, error } = useReferenceOneFieldController({\n *     record: { id: 7, name: 'James Joyce'}\n *     reference: 'bios',\n *     target: 'author_id',\n * });\n *\n * @typedef {Object} UseReferenceOneFieldControllerParams\n * @prop {Object} props.record The current resource record\n * @prop {string} props.reference The linked resource name\n * @prop {string} props.target The target resource key\n * @prop {string} props.source The key current record identifier ('id' by default)\n * @prop {Object} props.sort The sort to apply to the referenced records\n * @prop {Object} props.filter The filter to apply to the referenced records\n * @returns {UseReferenceResult} The request state. Destructure as { referenceRecord, isLoading, error }.\n */\nexport var useReferenceOneFieldController = function (props) {\n  var reference = props.reference,\n    record = props.record,\n    target = props.target,\n    _a = props.source,\n    source = _a === void 0 ? 'id' : _a,\n    _b = props.sort,\n    sort = _b === void 0 ? {\n      field: 'id',\n      order: 'ASC'\n    } : _b,\n    _c = props.filter,\n    filter = _c === void 0 ? {} : _c;\n  var notify = useNotify();\n  var _d = useGetManyReference(reference, {\n      target: target,\n      id: get(record, source),\n      pagination: {\n        page: 1,\n        perPage: 1\n      },\n      sort: sort,\n      filter: filter\n    }, {\n      enabled: !!record,\n      onError: function (error) {\n        return notify(typeof error === 'string' ? error : error.message || 'ra.notification.http_error', {\n          type: 'warning',\n          messageArgs: {\n            _: typeof error === 'string' ? error : error && error.message ? error.message : undefined\n          }\n        });\n      }\n    }),\n    data = _d.data,\n    error = _d.error,\n    isFetching = _d.isFetching,\n    isLoading = _d.isLoading,\n    refetch = _d.refetch;\n  return {\n    referenceRecord: data ? data[0] : undefined,\n    error: error,\n    isFetching: isFetching,\n    isLoading: isLoading,\n    refetch: refetch\n  };\n};","map":{"version":3,"mappings":"AAAA,OAAOA,GAAG,MAAM,YAAY;AAE5B,SAASC,mBAAmB,QAAQ,oBAAoB;AACxD,SAASC,SAAS,QAAQ,oBAAoB;AAa9C;;;;;;;;;;;;;;;;;;;;;;;AAuBA,OAAO,IAAMC,8BAA8B,GAAG,UAC1CC,KAA2C;EAGvC,aAAS,GAMTA,KAAK,UANI;IACTC,MAAM,GAKND,KAAK,OALC;IACNE,MAAM,GAINF,KAAK,OAJC;IACNG,KAGAH,KAAK,OAHQ;IAAbI,MAAM,mBAAG,IAAI;IACbC,KAEAL,KAAK,KAF+B;IAApCM,IAAI,mBAAG;MAAEC,KAAK,EAAE,IAAI;MAAEC,KAAK,EAAE;IAAK,CAAE;IACpCC,KACAT,KAAK,OADM;IAAXU,MAAM,mBAAG,EAAE;EAEf,IAAMC,MAAM,GAAGb,SAAS,EAAE;EAEpB,SAAkDD,mBAAmB,CACvEe,SAAS,EACT;MACIV,MAAM;MACNW,EAAE,EAAEjB,GAAG,CAACK,MAAM,EAAEG,MAAM,CAAC;MACvBU,UAAU,EAAE;QAAEC,IAAI,EAAE,CAAC;QAAEC,OAAO,EAAE;MAAC,CAAE;MACnCV,IAAI;MACJI,MAAM;KACT,EACD;MACIO,OAAO,EAAE,CAAC,CAAChB,MAAM;MACjBiB,OAAO,EAAE,eAAK;QACV,aAAM,CACF,OAAOC,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,CAACC,OAAO,IAAI,4BAA4B,EACnD;UACIC,IAAI,EAAE,SAAS;UACfC,WAAW,EAAE;YACTC,CAAC,EACG,OAAOJ,KAAK,KAAK,QAAQ,GACnBA,KAAK,GACLA,KAAK,IAAIA,KAAK,CAACC,OAAO,GACtBD,KAAK,CAACC,OAAO,GACbI;;SAEjB,CACJ;MAfD;KAgBP,CACJ;IA7BOC,IAAI;IAAEN,KAAK;IAAEO,UAAU;IAAEC,SAAS;IAAEC,OAAO,aA6BlD;EAED,OAAO;IACHC,eAAe,EAAEJ,IAAI,GAAGA,IAAI,CAAC,CAAC,CAAC,GAAGD,SAAS;IAC3CL,KAAK;IACLO,UAAU;IACVC,SAAS;IACTC,OAAO;GACV;AACL,CAAC","names":["get","useGetManyReference","useNotify","useReferenceOneFieldController","props","record","target","_a","source","_b","sort","field","order","_c","filter","notify","reference","id","pagination","page","perPage","enabled","onError","error","message","type","messageArgs","_","undefined","data","isFetching","isLoading","refetch","referenceRecord"],"sources":["/Users/jjun/design_system/node_modules/ra-core/src/controller/field/useReferenceOneFieldController.tsx"],"sourcesContent":["import get from 'lodash/get';\n\nimport { useGetManyReference } from '../../dataProvider';\nimport { useNotify } from '../../notification';\nimport { RaRecord, SortPayload } from '../../types';\nimport { UseReferenceResult } from '../useReference';\n\nexport interface UseReferenceOneFieldControllerParams {\n    record?: RaRecord;\n    reference: string;\n    source?: string;\n    target: string;\n    sort?: SortPayload;\n    filter?: any;\n}\n\n/**\n * Fetch a reference record in a one-to-one relationship, and return it when available\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example\n *\n * const { data, isLoading, error } = useReferenceOneFieldController({\n *     record: { id: 7, name: 'James Joyce'}\n *     reference: 'bios',\n *     target: 'author_id',\n * });\n *\n * @typedef {Object} UseReferenceOneFieldControllerParams\n * @prop {Object} props.record The current resource record\n * @prop {string} props.reference The linked resource name\n * @prop {string} props.target The target resource key\n * @prop {string} props.source The key current record identifier ('id' by default)\n * @prop {Object} props.sort The sort to apply to the referenced records\n * @prop {Object} props.filter The filter to apply to the referenced records\n * @returns {UseReferenceResult} The request state. Destructure as { referenceRecord, isLoading, error }.\n */\nexport const useReferenceOneFieldController = (\n    props: UseReferenceOneFieldControllerParams\n): UseReferenceResult => {\n    const {\n        reference,\n        record,\n        target,\n        source = 'id',\n        sort = { field: 'id', order: 'ASC' },\n        filter = {},\n    } = props;\n    const notify = useNotify();\n\n    const { data, error, isFetching, isLoading, refetch } = useGetManyReference(\n        reference,\n        {\n            target,\n            id: get(record, source),\n            pagination: { page: 1, perPage: 1 },\n            sort,\n            filter,\n        },\n        {\n            enabled: !!record,\n            onError: error =>\n                notify(\n                    typeof error === 'string'\n                        ? error\n                        : error.message || 'ra.notification.http_error',\n                    {\n                        type: 'warning',\n                        messageArgs: {\n                            _:\n                                typeof error === 'string'\n                                    ? error\n                                    : error && error.message\n                                    ? error.message\n                                    : undefined,\n                        },\n                    }\n                ),\n        }\n    );\n\n    return {\n        referenceRecord: data ? data[0] : undefined,\n        error,\n        isFetching,\n        isLoading,\n        refetch,\n    };\n};\n"]},"metadata":{},"sourceType":"module"}