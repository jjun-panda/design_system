{"ast":null,"code":"import * as React from 'react';\nimport { usePreference, useSetInspectorTitle, useTranslate } from 'ra-core';\nimport { Box, Button } from '@mui/material';\nimport { FieldEditor } from './FieldEditor';\nexport var DatagridEditor = function DatagridEditor() {\n  var translate = useTranslate();\n  useSetInspectorTitle('ra.inspector.datagrid', {\n    _: 'Datagrid'\n  });\n  var availableColumns = usePreference('availableColumns', [])[0];\n  var omit = usePreference('omit', [])[0];\n  var _a = usePreference('columns', availableColumns.filter(function (column) {\n      return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n    }).map(function (column) {\n      return column.index;\n    })),\n    columns = _a[0],\n    setColumns = _a[1];\n  var handleToggle = function handleToggle(event) {\n    if (event.target.checked) {\n      // add the column at the right position\n      setColumns(availableColumns.filter(function (column) {\n        return column.index === event.target.name || columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      }));\n    } else {\n      setColumns(columns.filter(function (index) {\n        return index !== event.target.name;\n      }));\n    }\n  };\n  var handleHideAll = function handleHideAll() {\n    setColumns([]);\n  };\n  var handleShowAll = function handleShowAll() {\n    setColumns(availableColumns.map(function (column) {\n      return column.index;\n    }));\n  };\n  return React.createElement(\"div\", null, availableColumns.map(function (column) {\n    return React.createElement(FieldEditor, {\n      key: column.index,\n      source: column.source,\n      label: column.label,\n      index: column.index,\n      selected: columns.includes(column.index),\n      onToggle: handleToggle\n    });\n  }), React.createElement(Box, {\n    display: \"flex\",\n    justifyContent: \"space-between\",\n    mx: -0.5,\n    mt: 1\n  }, React.createElement(Button, {\n    size: \"small\",\n    onClick: handleHideAll\n  }, translate('ra.inspector.datagrid.hideAll', {\n    _: 'Hide All'\n  })), React.createElement(Button, {\n    size: \"small\",\n    onClick: handleShowAll\n  }, translate('ra.inspector.datagrid.showAll', {\n    _: 'Show All'\n  }))));\n};","map":{"version":3,"mappings":"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","names":["React","usePreference","useSetInspectorTitle","useTranslate","Box","Button","FieldEditor","DatagridEditor","translate","_","availableColumns","filter","omit","includes","column","source","map","index","columns","setColumns","handleToggle","event","target","checked","name","handleHideAll","handleShowAll","key","label","selected","onToggle","display","justifyContent","mx","mt","size","onClick"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/list/datagrid/DatagridEditor.tsx"],"sourcesContent":["import * as React from 'react';\nimport { usePreference, useSetInspectorTitle, useTranslate } from 'ra-core';\nimport { Box, Button } from '@mui/material';\n\nimport { ConfigurableDatagridColumn } from './DatagridConfigurable';\nimport { FieldEditor } from './FieldEditor';\n\nexport const DatagridEditor = () => {\n    const translate = useTranslate();\n    useSetInspectorTitle('ra.inspector.datagrid', { _: 'Datagrid' });\n\n    const [availableColumns] = usePreference<ConfigurableDatagridColumn[]>(\n        'availableColumns',\n        []\n    );\n    const [omit] = usePreference('omit', []);\n\n    const [columns, setColumns] = usePreference(\n        'columns',\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setColumns(\n                availableColumns\n                    .filter(\n                        column =>\n                            column.index === event.target.name ||\n                            columns.includes(column.index)\n                    )\n                    .map(column => column.index)\n            );\n        } else {\n            setColumns(columns.filter(index => index !== event.target.name));\n        }\n    };\n\n    const handleHideAll = () => {\n        setColumns([]);\n    };\n    const handleShowAll = () => {\n        setColumns(availableColumns.map(column => column.index));\n    };\n    return (\n        <div>\n            {availableColumns.map(column => (\n                <FieldEditor\n                    key={column.index}\n                    source={column.source}\n                    label={column.label}\n                    index={column.index}\n                    selected={columns.includes(column.index)}\n                    onToggle={handleToggle}\n                />\n            ))}\n            <Box display=\"flex\" justifyContent=\"space-between\" mx={-0.5} mt={1}>\n                <Button size=\"small\" onClick={handleHideAll}>\n                    {translate('ra.inspector.datagrid.hideAll', {\n                        _: 'Hide All',\n                    })}\n                </Button>\n                <Button size=\"small\" onClick={handleShowAll}>\n                    {translate('ra.inspector.datagrid.showAll', {\n                        _: 'Show All',\n                    })}\n                </Button>\n            </Box>\n        </div>\n    );\n};\n"]},"metadata":{},"sourceType":"module"}