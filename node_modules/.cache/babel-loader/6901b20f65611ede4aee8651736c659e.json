{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) {\n        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n      }\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) {\n    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  }\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { memo } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport { useReference, ResourceContextProvider, RecordContextProvider, useRecordContext, useCreatePath, useGetRecordRepresentation, useResourceDefinition, useTranslate } from 'ra-core';\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { fieldPropTypes } from './types';\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport var ReferenceField = function ReferenceField(props) {\n  var source = props.source,\n    emptyText = props.emptyText,\n    rest = __rest(props, [\"source\", \"emptyText\"]);\n  var record = useRecordContext(props);\n  var id = get(record, source);\n  var translate = useTranslate();\n  return id == null ? emptyText ? React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, emptyText && translate(emptyText, {\n    _: emptyText\n  })) : null : React.createElement(NonEmptyReferenceField, __assign({}, rest, {\n    emptyText: emptyText,\n    record: record,\n    id: id\n  }));\n};\nReferenceField.propTypes = {\n  children: PropTypes.node,\n  className: PropTypes.string,\n  cellClassName: PropTypes.string,\n  headerClassName: PropTypes.string,\n  label: fieldPropTypes.label,\n  record: PropTypes.any,\n  reference: PropTypes.string.isRequired,\n  resource: PropTypes.string,\n  sortBy: PropTypes.string,\n  sortByOrder: fieldPropTypes.sortByOrder,\n  source: PropTypes.string.isRequired,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  // @ts-ignore\n  link: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.func]).isRequired\n};\nReferenceField.defaultProps = {\n  link: 'edit'\n};\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport var NonEmptyReferenceField = function NonEmptyReferenceField(_a) {\n  var children = _a.children,\n    id = _a.id,\n    record = _a.record,\n    reference = _a.reference,\n    link = _a.link,\n    props = __rest(_a, [\"children\", \"id\", \"record\", \"reference\", \"link\"]);\n  var createPath = useCreatePath();\n  var resourceDefinition = useResourceDefinition({\n    resource: reference\n  });\n  var resourceLinkPath = link === false || link === 'edit' && !resourceDefinition.hasEdit || link === 'show' && !resourceDefinition.hasShow ? false : createPath({\n    resource: reference,\n    id: id,\n    type: typeof link === 'function' ? link(record, reference) : link\n  });\n  return React.createElement(ResourceContextProvider, {\n    value: reference\n  }, React.createElement(PureReferenceFieldView, __assign({\n    reference: reference\n  }, props, useReference({\n    reference: reference,\n    id: id\n  }), {\n    resourceLinkPath: resourceLinkPath\n  }), children));\n};\n// useful to prevent click bubbling in a datagrid with rowClick\nvar stopPropagation = function stopPropagation(e) {\n  return e.stopPropagation();\n};\nexport var ReferenceFieldView = function ReferenceFieldView(props) {\n  var children = props.children,\n    className = props.className,\n    emptyText = props.emptyText,\n    error = props.error,\n    isLoading = props.isLoading,\n    reference = props.reference,\n    referenceRecord = props.referenceRecord,\n    resourceLinkPath = props.resourceLinkPath,\n    sx = props.sx;\n  var getRecordRepresentation = useGetRecordRepresentation(reference);\n  var translate = useTranslate();\n  if (error) {\n    return (/* eslint-disable jsx-a11y/role-supports-aria-props */\n      React.createElement(ErrorIcon, {\n        \"aria-errormessage\": error.message ? error.message : error,\n        role: \"presentation\",\n        color: \"error\",\n        fontSize: \"small\"\n      })\n      /* eslint-enable */\n    );\n  }\n\n  if (isLoading) {\n    return React.createElement(LinearProgress, null);\n  }\n  if (!referenceRecord) {\n    return emptyText ? React.createElement(React.Fragment, null, emptyText && translate(emptyText, {\n      _: emptyText\n    })) : null;\n  }\n  var child = children || React.createElement(Typography, {\n    component: \"span\",\n    variant: \"body2\"\n  }, getRecordRepresentation(referenceRecord));\n  return resourceLinkPath ? React.createElement(Root, {\n    className: className,\n    sx: sx\n  }, React.createElement(RecordContextProvider, {\n    value: referenceRecord\n  }, React.createElement(Link, {\n    to: resourceLinkPath,\n    className: ReferenceFieldClasses.link,\n    onClick: stopPropagation\n  }, child))) : React.createElement(RecordContextProvider, {\n    value: referenceRecord\n  }, child);\n};\nReferenceFieldView.propTypes = {\n  children: PropTypes.element,\n  className: PropTypes.string,\n  isLoading: PropTypes.bool,\n  record: PropTypes.any,\n  reference: PropTypes.string,\n  referenceRecord: PropTypes.any,\n  resource: PropTypes.string,\n  resourceLinkPath: PropTypes.oneOfType([PropTypes.string, PropTypes.oneOf([false])]),\n  source: PropTypes.string,\n  translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool])\n};\nvar PureReferenceFieldView = memo(ReferenceFieldView);\nvar PREFIX = 'RaReferenceField';\nexport var ReferenceFieldClasses = {\n  link: \"\".concat(PREFIX, \"-link\")\n};\nvar Root = styled('span', {\n  name: PREFIX,\n  overridesResolver: function overridesResolver(props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b;\n  var theme = _a.theme;\n  return _b = {}, _b[\"& .\".concat(ReferenceFieldClasses.link)] = {\n    '& > *': {\n      color: theme.palette.primary.main\n    }\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","memo","PropTypes","get","Typography","styled","ErrorIcon","useReference","ResourceContextProvider","RecordContextProvider","useRecordContext","useCreatePath","useGetRecordRepresentation","useResourceDefinition","useTranslate","LinearProgress","Link","fieldPropTypes","ReferenceField","props","emptyText","rest","record","id","source","translate","component","variant","_","NonEmptyReferenceField","propTypes","children","node","className","string","cellClassName","headerClassName","label","any","reference","isRequired","resource","sortBy","sortByOrder","translateChoice","oneOfType","func","bool","link","defaultProps","_a","createPath","resourceDefinition","resourceLinkPath","hasEdit","hasShow","type","value","PureReferenceFieldView","stopPropagation","e","ReferenceFieldView","error","isLoading","referenceRecord","sx","getRecordRepresentation","message","role","color","fontSize","child","Root","to","ReferenceFieldClasses","onClick","element","oneOf","PREFIX","name","overridesResolver","styles","root","theme","_b","palette","primary","main"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/field/ReferenceField.tsx"],"sourcesContent":["import * as React from 'react';\nimport { FC, memo, ReactNode } from 'react';\nimport PropTypes from 'prop-types';\nimport get from 'lodash/get';\nimport { Typography, SxProps } from '@mui/material';\nimport { styled } from '@mui/material/styles';\nimport ErrorIcon from '@mui/icons-material/Error';\nimport {\n    useReference,\n    UseReferenceResult,\n    LinkToType,\n    ResourceContextProvider,\n    RecordContextProvider,\n    RaRecord,\n    useRecordContext,\n    useCreatePath,\n    Identifier,\n    useGetRecordRepresentation,\n    useResourceDefinition,\n    useTranslate,\n} from 'ra-core';\n\nimport { LinearProgress } from '../layout';\nimport { Link } from '../Link';\nimport { PublicFieldProps, fieldPropTypes, InjectedFieldProps } from './types';\n\n/**\n * Fetch reference record, and render its representation, or delegate rendering to child component.\n *\n * The reference prop should be the name of one of the <Resource> components\n * added as <Admin> child.\n *\n * @example // using recordRepresentation\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" />\n *\n * @example // using a Field component to represent the record\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\">\n *     <TextField source=\"name\" />\n * </ReferenceField>\n *\n * @example // By default, includes a link to the <Edit> page of the related record\n * // (`/users/:userId` in the previous example).\n * // Set the `link` prop to \"show\" to link to the <Show> page instead.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link=\"show\" />\n *\n * @example // You can also prevent `<ReferenceField>` from adding link to children\n * // by setting `link` to false.\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={false} />\n *\n * @example // Alternatively, you can also pass a custom function to `link`.\n * // It must take reference and record as arguments and return a string\n * <ReferenceField label=\"User\" source=\"userId\" reference=\"users\" link={(record, reference) => \"/path/to/${reference}/${record}\"} />\n *\n * @default\n * In previous versions of React-Admin, the prop `linkType` was used. It is now deprecated and replaced with `link`. However\n * backward-compatibility is still kept\n */\nexport const ReferenceField: FC<ReferenceFieldProps> = props => {\n    const { source, emptyText, ...rest } = props;\n    const record = useRecordContext(props);\n    const id = get(record, source);\n    const translate = useTranslate();\n\n    return id == null ? (\n        emptyText ? (\n            <Typography component=\"span\" variant=\"body2\">\n                {emptyText && translate(emptyText, { _: emptyText })}\n            </Typography>\n        ) : null\n    ) : (\n        <NonEmptyReferenceField\n            {...rest}\n            emptyText={emptyText}\n            record={record}\n            id={id}\n        />\n    );\n};\n\nReferenceField.propTypes = {\n    children: PropTypes.node,\n    className: PropTypes.string,\n    cellClassName: PropTypes.string,\n    headerClassName: PropTypes.string,\n    label: fieldPropTypes.label,\n    record: PropTypes.any,\n    reference: PropTypes.string.isRequired,\n    resource: PropTypes.string,\n    sortBy: PropTypes.string,\n    sortByOrder: fieldPropTypes.sortByOrder,\n    source: PropTypes.string.isRequired,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    // @ts-ignore\n    link: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.func,\n    ]).isRequired,\n};\n\nReferenceField.defaultProps = {\n    link: 'edit',\n};\n\nexport interface ReferenceFieldProps<RecordType extends RaRecord = any>\n    extends PublicFieldProps,\n        InjectedFieldProps<RecordType> {\n    children?: ReactNode;\n    reference: string;\n    resource?: string;\n    source: string;\n    translateChoice?: Function | boolean;\n    link?: LinkToType;\n    sx?: SxProps;\n}\n\n/**\n * This intermediate component is made necessary by the useReference hook,\n * which cannot be called conditionally when get(record, source) is empty.\n */\nexport const NonEmptyReferenceField: FC<\n    Omit<ReferenceFieldProps, 'source'> & { id: Identifier }\n> = ({ children, id, record, reference, link, ...props }) => {\n    const createPath = useCreatePath();\n    const resourceDefinition = useResourceDefinition({ resource: reference });\n\n    const resourceLinkPath =\n        link === false ||\n        (link === 'edit' && !resourceDefinition.hasEdit) ||\n        (link === 'show' && !resourceDefinition.hasShow)\n            ? false\n            : createPath({\n                  resource: reference,\n                  id,\n                  type:\n                      typeof link === 'function'\n                          ? link(record, reference)\n                          : link,\n              });\n\n    return (\n        <ResourceContextProvider value={reference}>\n            <PureReferenceFieldView\n                reference={reference}\n                {...props}\n                {...useReference({\n                    reference,\n                    id,\n                })}\n                resourceLinkPath={resourceLinkPath}\n            >\n                {children}\n            </PureReferenceFieldView>\n        </ResourceContextProvider>\n    );\n};\n\n// useful to prevent click bubbling in a datagrid with rowClick\nconst stopPropagation = e => e.stopPropagation();\n\nexport const ReferenceFieldView: FC<ReferenceFieldViewProps> = props => {\n    const {\n        children,\n        className,\n        emptyText,\n        error,\n        isLoading,\n        reference,\n        referenceRecord,\n        resourceLinkPath,\n        sx,\n    } = props;\n    const getRecordRepresentation = useGetRecordRepresentation(reference);\n    const translate = useTranslate();\n\n    if (error) {\n        return (\n            /* eslint-disable jsx-a11y/role-supports-aria-props */\n            <ErrorIcon\n                aria-errormessage={error.message ? error.message : error}\n                role=\"presentation\"\n                color=\"error\"\n                fontSize=\"small\"\n            />\n            /* eslint-enable */\n        );\n    }\n    if (isLoading) {\n        return <LinearProgress />;\n    }\n    if (!referenceRecord) {\n        return emptyText ? (\n            <>{emptyText && translate(emptyText, { _: emptyText })}</>\n        ) : null;\n    }\n\n    let child = children || (\n        <Typography component=\"span\" variant=\"body2\">\n            {getRecordRepresentation(referenceRecord)}\n        </Typography>\n    );\n\n    return resourceLinkPath ? (\n        <Root className={className} sx={sx}>\n            <RecordContextProvider value={referenceRecord}>\n                <Link\n                    to={resourceLinkPath as string}\n                    className={ReferenceFieldClasses.link}\n                    onClick={stopPropagation}\n                >\n                    {child}\n                </Link>\n            </RecordContextProvider>\n        </Root>\n    ) : (\n        <RecordContextProvider value={referenceRecord}>\n            {child}\n        </RecordContextProvider>\n    );\n};\n\nReferenceFieldView.propTypes = {\n    children: PropTypes.element,\n    className: PropTypes.string,\n    isLoading: PropTypes.bool,\n    record: PropTypes.any,\n    reference: PropTypes.string,\n    referenceRecord: PropTypes.any,\n    resource: PropTypes.string,\n    resourceLinkPath: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.oneOf([false]),\n    ]) as React.Validator<string | false>,\n    source: PropTypes.string,\n    translateChoice: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n};\n\nexport interface ReferenceFieldViewProps\n    extends PublicFieldProps,\n        InjectedFieldProps,\n        UseReferenceResult {\n    reference: string;\n    resource?: string;\n    translateChoice?: Function | boolean;\n    resourceLinkPath?: string | false;\n    children?: ReactNode;\n    sx?: SxProps;\n}\n\nconst PureReferenceFieldView = memo(ReferenceFieldView);\n\nconst PREFIX = 'RaReferenceField';\n\nexport const ReferenceFieldClasses = {\n    link: `${PREFIX}-link`,\n};\n\nconst Root = styled('span', {\n    name: PREFIX,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    [`& .${ReferenceFieldClasses.link}`]: {\n        '& > *': {\n            color: theme.palette.primary.main,\n        },\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}