{"ast":null,"code":"var __assign = this && this.__assign || function () {\n  __assign = Object.assign || function (t) {\n    for (var s, i = 1, n = arguments.length; i < n; i++) {\n      s = arguments[i];\n      for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\n    }\n    return t;\n  };\n  return __assign.apply(this, arguments);\n};\nvar __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\nexport var NumberInput = function (_a) {\n  var className = _a.className,\n    _b = _a.defaultValue,\n    defaultValue = _b === void 0 ? null : _b,\n    _c = _a.format,\n    format = _c === void 0 ? convertNumberToString : _c,\n    helperText = _a.helperText,\n    label = _a.label,\n    margin = _a.margin,\n    onChange = _a.onChange,\n    parse = _a.parse,\n    resource = _a.resource,\n    source = _a.source,\n    step = _a.step,\n    min = _a.min,\n    max = _a.max,\n    validate = _a.validate,\n    variant = _a.variant,\n    overrideInputProps = _a.inputProps,\n    rest = __rest(_a, [\"className\", \"defaultValue\", \"format\", \"helperText\", \"label\", \"margin\", \"onChange\", \"parse\", \"resource\", \"source\", \"step\", \"min\", \"max\", \"validate\", \"variant\", \"inputProps\"]);\n  var _d = useInput(__assign({\n      defaultValue: defaultValue,\n      resource: resource,\n      source: source,\n      validate: validate\n    }, rest)),\n    field = _d.field,\n    _e = _d.fieldState,\n    error = _e.error,\n    invalid = _e.invalid,\n    isTouched = _e.isTouched,\n    isSubmitted = _d.formState.isSubmitted,\n    id = _d.id,\n    isRequired = _d.isRequired;\n  var inputProps = __assign(__assign({}, overrideInputProps), {\n    step: step,\n    min: min,\n    max: max\n  });\n  // This is a controlled input that renders directly the string typed by the user.\n  // This string is converted to a number on change, and stored in the form state,\n  // but that number is not not displayed.\n  // This is to allow transitory values like '1.0' that will lead to '1.02'\n  // text typed by the user and displayed in the input, unparsed\n  var _f = React.useState(format(field.value)),\n    value = _f[0],\n    setValue = _f[1];\n  // update the input text when the record changes\n  React.useEffect(function () {\n    var stringValue = format(field.value);\n    setValue(function (value) {\n      return value !== stringValue ? stringValue : value;\n    });\n  }, [field.value]); // eslint-disable-line react-hooks/exhaustive-deps\n  // update the input text when the user types in the input\n  var handleChange = function (event) {\n    if (onChange) {\n      onChange(event);\n    }\n    if (typeof event.target === 'undefined' || typeof event.target.value === 'undefined') {\n      return;\n    }\n    var target = event.target;\n    setValue(target.value);\n    var newValue = target.valueAsNumber ? parse ? parse(target.valueAsNumber) : target.valueAsNumber : parse ? parse(target.value) : convertStringToNumber(target.value);\n    field.onChange(newValue);\n  };\n  return React.createElement(TextField, __assign({\n    id: id\n  }, field, {\n    // use the locally controlled state instead of the react-hook-form field state\n    value: value,\n    onChange: handleChange,\n    className: clsx('ra-input', \"ra-input-\".concat(source), className),\n    type: \"number\",\n    size: \"small\",\n    variant: variant,\n    error: (isTouched || isSubmitted) && invalid,\n    helperText: React.createElement(InputHelperText, {\n      touched: isTouched || isSubmitted,\n      error: error === null || error === void 0 ? void 0 : error.message,\n      helperText: helperText\n    }),\n    label: React.createElement(FieldTitle, {\n      label: label,\n      source: source,\n      resource: resource,\n      isRequired: isRequired\n    }),\n    margin: margin,\n    inputProps: inputProps\n  }, sanitizeInputRestProps(rest)));\n};\nNumberInput.propTypes = {\n  label: PropTypes.oneOfType([PropTypes.string, PropTypes.bool, PropTypes.element]),\n  options: PropTypes.object,\n  resource: PropTypes.string,\n  source: PropTypes.string,\n  step: PropTypes.oneOfType([PropTypes.string, PropTypes.number])\n};\nNumberInput.defaultProps = {\n  options: {},\n  step: 'any',\n  textAlign: 'right'\n};\nvar convertStringToNumber = function (value) {\n  if (value == null || value === '') {\n    return null;\n  }\n  var float = parseFloat(value);\n  return isNaN(float) ? 0 : float;\n};\nvar convertNumberToString = function (value) {\n  return value == null || isNaN(value) ? '' : value.toString();\n};","map":{"version":3,"mappings":"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","names":["React","PropTypes","clsx","TextField","useInput","FieldTitle","InputHelperText","sanitizeInputRestProps","NumberInput","_a","_b","defaultValue","_c","format","convertNumberToString","helperText","label","margin","onChange","parse","resource","source","step","min","max","validate","variant","overrideInputProps","rest","field","_e","error","invalid","isTouched","isSubmitted","id","isRequired","inputProps","useState","value","setValue","useEffect","stringValue","handleChange","event","target","newValue","valueAsNumber","convertStringToNumber","className","type","size","touched","message","propTypes","oneOfType","string","bool","element","options","object","number","defaultProps","textAlign","float","parseFloat","isNaN","toString"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/input/NumberInput.tsx"],"sourcesContent":["import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport TextField, { TextFieldProps } from '@mui/material/TextField';\nimport { useInput, FieldTitle } from 'ra-core';\n\nimport { CommonInputProps } from './CommonInputProps';\nimport { InputHelperText } from './InputHelperText';\nimport { sanitizeInputRestProps } from './sanitizeInputRestProps';\n\n/**\n * An Input component for a number\n *\n * @example\n * <NumberInput source=\"nb_views\" />\n *\n * You can customize the `step` props (which defaults to \"any\")\n * @example\n * <NumberInput source=\"nb_views\" step={1} />\n *\n */\nexport const NumberInput = ({\n    className,\n    defaultValue = null,\n    format = convertNumberToString,\n    helperText,\n    label,\n    margin,\n    onChange,\n    parse,\n    resource,\n    source,\n    step,\n    min,\n    max,\n    validate,\n    variant,\n    inputProps: overrideInputProps,\n    ...rest\n}: NumberInputProps) => {\n    const {\n        field,\n        fieldState: { error, invalid, isTouched },\n        formState: { isSubmitted },\n        id,\n        isRequired,\n    } = useInput({\n        defaultValue,\n        resource,\n        source,\n        validate,\n        ...rest,\n    });\n\n    const inputProps = { ...overrideInputProps, step, min, max };\n\n    // This is a controlled input that renders directly the string typed by the user.\n    // This string is converted to a number on change, and stored in the form state,\n    // but that number is not not displayed.\n    // This is to allow transitory values like '1.0' that will lead to '1.02'\n\n    // text typed by the user and displayed in the input, unparsed\n    const [value, setValue] = React.useState(format(field.value));\n\n    // update the input text when the record changes\n    React.useEffect(() => {\n        const stringValue = format(field.value);\n        setValue(value => (value !== stringValue ? stringValue : value));\n    }, [field.value]); // eslint-disable-line react-hooks/exhaustive-deps\n\n    // update the input text when the user types in the input\n    const handleChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n        if (onChange) {\n            onChange(event);\n        }\n        if (\n            typeof event.target === 'undefined' ||\n            typeof event.target.value === 'undefined'\n        ) {\n            return;\n        }\n        const target = event.target;\n        setValue(target.value);\n        const newValue = target.valueAsNumber\n            ? parse\n                ? parse(target.valueAsNumber)\n                : target.valueAsNumber\n            : parse\n            ? parse(target.value)\n            : convertStringToNumber(target.value);\n        field.onChange(newValue);\n    };\n\n    return (\n        <TextField\n            id={id}\n            {...field}\n            // use the locally controlled state instead of the react-hook-form field state\n            value={value}\n            onChange={handleChange}\n            className={clsx('ra-input', `ra-input-${source}`, className)}\n            type=\"number\"\n            size=\"small\"\n            variant={variant}\n            error={(isTouched || isSubmitted) && invalid}\n            helperText={\n                <InputHelperText\n                    touched={isTouched || isSubmitted}\n                    error={error?.message}\n                    helperText={helperText}\n                />\n            }\n            label={\n                <FieldTitle\n                    label={label}\n                    source={source}\n                    resource={resource}\n                    isRequired={isRequired}\n                />\n            }\n            margin={margin}\n            inputProps={inputProps}\n            {...sanitizeInputRestProps(rest)}\n        />\n    );\n};\n\nNumberInput.propTypes = {\n    label: PropTypes.oneOfType([\n        PropTypes.string,\n        PropTypes.bool,\n        PropTypes.element,\n    ]),\n    options: PropTypes.object,\n    resource: PropTypes.string,\n    source: PropTypes.string,\n    step: PropTypes.oneOfType([PropTypes.string, PropTypes.number]),\n};\n\nNumberInput.defaultProps = {\n    options: {},\n    step: 'any',\n    textAlign: 'right',\n};\n\nexport interface NumberInputProps\n    extends CommonInputProps,\n        Omit<\n            TextFieldProps,\n            | 'label'\n            | 'helperText'\n            | 'defaultValue'\n            | 'onChange'\n            | 'onBlur'\n            | 'type'\n        > {\n    step?: string | number;\n    min?: string | number;\n    max?: string | number;\n}\n\nconst convertStringToNumber = value => {\n    if (value == null || value === '') {\n        return null;\n    }\n    const float = parseFloat(value);\n\n    return isNaN(float) ? 0 : float;\n};\n\nconst convertNumberToString = value =>\n    value == null || isNaN(value) ? '' : value.toString();\n"]},"metadata":{},"sourceType":"module"}