{"ast":null,"code":"var __awaiter = this && this.__awaiter || function (thisArg, _arguments, P, generator) {\n  function adopt(value) {\n    return value instanceof P ? value : new P(function (resolve) {\n      resolve(value);\n    });\n  }\n  return new (P || (P = Promise))(function (resolve, reject) {\n    function fulfilled(value) {\n      try {\n        step(generator.next(value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function rejected(value) {\n      try {\n        step(generator[\"throw\"](value));\n      } catch (e) {\n        reject(e);\n      }\n    }\n    function step(result) {\n      result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected);\n    }\n    step((generator = generator.apply(thisArg, _arguments || [])).next());\n  });\n};\nvar __generator = this && this.__generator || function (thisArg, body) {\n  var _ = {\n      label: 0,\n      sent: function () {\n        if (t[0] & 1) throw t[1];\n        return t[1];\n      },\n      trys: [],\n      ops: []\n    },\n    f,\n    y,\n    t,\n    g;\n  return g = {\n    next: verb(0),\n    \"throw\": verb(1),\n    \"return\": verb(2)\n  }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function () {\n    return this;\n  }), g;\n  function verb(n) {\n    return function (v) {\n      return step([n, v]);\n    };\n  }\n  function step(op) {\n    if (f) throw new TypeError(\"Generator is already executing.\");\n    while (_) try {\n      if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\n      if (y = 0, t) op = [op[0] & 2, t.value];\n      switch (op[0]) {\n        case 0:\n        case 1:\n          t = op;\n          break;\n        case 4:\n          _.label++;\n          return {\n            value: op[1],\n            done: false\n          };\n        case 5:\n          _.label++;\n          y = op[1];\n          op = [0];\n          continue;\n        case 7:\n          op = _.ops.pop();\n          _.trys.pop();\n          continue;\n        default:\n          if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) {\n            _ = 0;\n            continue;\n          }\n          if (op[0] === 3 && (!t || op[1] > t[0] && op[1] < t[3])) {\n            _.label = op[1];\n            break;\n          }\n          if (op[0] === 6 && _.label < t[1]) {\n            _.label = t[1];\n            t = op;\n            break;\n          }\n          if (t && _.label < t[2]) {\n            _.label = t[2];\n            _.ops.push(op);\n            break;\n          }\n          if (t[2]) _.ops.pop();\n          _.trys.pop();\n          continue;\n      }\n      op = body.call(thisArg, _);\n    } catch (e) {\n      op = [6, e];\n      y = 0;\n    } finally {\n      f = t = 0;\n    }\n    if (op[0] & 5) throw op[1];\n    return {\n      value: op[0] ? op[1] : void 0,\n      done: true\n    };\n  }\n};\nimport { useEffect } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport { useSafeSetState } from '../util/hooks';\nvar defaultIdentity = {\n  id: '',\n  fullName: null\n};\n/**\n * Return the current user identity by calling authProvider.getIdentity() on mount\n *\n * The return value updates according to the call state:\n *\n * - mount: { isLoading: true }\n * - success: { identity: Identity, isLoading: false }\n * - error: { error: Error, isLoading: false }\n *\n * The implementation is left to the authProvider.\n *\n * @returns The current user identity. Destructure as { identity, error, isLoading }.\n *\n * @example\n *\n * import { useGetIdentity, useGetOne } from 'react-admin';\n *\n * const PostDetail = ({ id }) => {\n *     const { data: post, isLoading: postLoading } = useGetOne('posts', { id });\n *     const { identity, isLoading: identityLoading } = useGetIdentity();\n *     if (postLoading || identityLoading) return <>Loading...</>;\n *     if (!post.lockedBy || post.lockedBy === identity.id) {\n *         // post isn't locked, or is locked by me\n *         return <PostEdit post={post} />\n *     } else {\n *         // post is locked by someone else and cannot be edited\n *         return <PostShow post={post} />\n *     }\n * }\n */\nvar useGetIdentity = function () {\n  var _a = useSafeSetState({\n      isLoading: true\n    }),\n    state = _a[0],\n    setState = _a[1];\n  var authProvider = useAuthProvider();\n  useEffect(function () {\n    if (authProvider && typeof authProvider.getIdentity === 'function') {\n      var callAuthProvider = function () {\n        return __awaiter(void 0, void 0, void 0, function () {\n          var identity, error_1;\n          return __generator(this, function (_a) {\n            switch (_a.label) {\n              case 0:\n                _a.trys.push([0, 2,, 3]);\n                return [4 /*yield*/, authProvider.getIdentity()];\n              case 1:\n                identity = _a.sent();\n                setState({\n                  isLoading: false,\n                  identity: identity || defaultIdentity\n                });\n                return [3 /*break*/, 3];\n              case 2:\n                error_1 = _a.sent();\n                setState({\n                  isLoading: false,\n                  error: error_1\n                });\n                return [3 /*break*/, 3];\n              case 3:\n                return [2 /*return*/];\n            }\n          });\n        });\n      };\n\n      callAuthProvider();\n    } else {\n      setState({\n        isLoading: false,\n        identity: defaultIdentity\n      });\n    }\n  }, [authProvider, setState]);\n  return state;\n};\nexport default useGetIdentity;","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA,SAASA,SAAS,QAAQ,OAAO;AACjC,OAAOC,eAAe,MAAM,mBAAmB;AAE/C,SAASC,eAAe,QAAQ,eAAe;AAE/C,IAAMC,eAAe,GAAG;EACpBC,EAAE,EAAE,EAAE;EACNC,QAAQ,EAAE;CACb;AAED;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA8BA,IAAMC,cAAc,GAAG;EACb,SAAoBJ,eAAe,CAAQ;MAC7CK,SAAS,EAAE;KACd,CAAC;IAFKC,KAAK;IAAEC,QAAQ,QAEpB;EACF,IAAMC,YAAY,GAAGT,eAAe,EAAE;EACtCD,SAAS,CAAC;IACN,IAAIU,YAAY,IAAI,OAAOA,YAAY,CAACC,WAAW,KAAK,UAAU,EAAE;MAChE,IAAMC,gBAAgB,GAAG;QAAA;;;;;;gBAEA,qBAAMF,YAAY,CAACC,WAAW,EAAE;;gBAA3CE,QAAQ,GAAGC,SAAgC;gBACjDL,QAAQ,CAAC;kBACLF,SAAS,EAAE,KAAK;kBAChBM,QAAQ,EAAEA,QAAQ,IAAIV;iBACzB,CAAC;;;;gBAEFM,QAAQ,CAAC;kBACLF,SAAS,EAAE,KAAK;kBAChBQ,KAAK;iBACR,CAAC;;;;;;;OAET;;MACDH,gBAAgB,EAAE;KACrB,MAAM;MACHH,QAAQ,CAAC;QACLF,SAAS,EAAE,KAAK;QAChBM,QAAQ,EAAEV;OACb,CAAC;;EAEV,CAAC,EAAE,CAACO,YAAY,EAAED,QAAQ,CAAC,CAAC;EAC5B,OAAOD,KAAK;AAChB,CAAC;AAQD,eAAeF,cAAc","names":["useEffect","useAuthProvider","useSafeSetState","defaultIdentity","id","fullName","useGetIdentity","isLoading","state","setState","authProvider","getIdentity","callAuthProvider","identity","_a","error"],"sources":["/Users/jjun/design_system/node_modules/ra-core/src/auth/useGetIdentity.ts"],"sourcesContent":["import { useEffect } from 'react';\nimport useAuthProvider from './useAuthProvider';\nimport { UserIdentity } from '../types';\nimport { useSafeSetState } from '../util/hooks';\n\nconst defaultIdentity = {\n    id: '',\n    fullName: null,\n};\n\n/**\n * Return the current user identity by calling authProvider.getIdentity() on mount\n *\n * The return value updates according to the call state:\n *\n * - mount: { isLoading: true }\n * - success: { identity: Identity, isLoading: false }\n * - error: { error: Error, isLoading: false }\n *\n * The implementation is left to the authProvider.\n *\n * @returns The current user identity. Destructure as { identity, error, isLoading }.\n *\n * @example\n *\n * import { useGetIdentity, useGetOne } from 'react-admin';\n *\n * const PostDetail = ({ id }) => {\n *     const { data: post, isLoading: postLoading } = useGetOne('posts', { id });\n *     const { identity, isLoading: identityLoading } = useGetIdentity();\n *     if (postLoading || identityLoading) return <>Loading...</>;\n *     if (!post.lockedBy || post.lockedBy === identity.id) {\n *         // post isn't locked, or is locked by me\n *         return <PostEdit post={post} />\n *     } else {\n *         // post is locked by someone else and cannot be edited\n *         return <PostShow post={post} />\n *     }\n * }\n */\nconst useGetIdentity = () => {\n    const [state, setState] = useSafeSetState<State>({\n        isLoading: true,\n    });\n    const authProvider = useAuthProvider();\n    useEffect(() => {\n        if (authProvider && typeof authProvider.getIdentity === 'function') {\n            const callAuthProvider = async () => {\n                try {\n                    const identity = await authProvider.getIdentity();\n                    setState({\n                        isLoading: false,\n                        identity: identity || defaultIdentity,\n                    });\n                } catch (error) {\n                    setState({\n                        isLoading: false,\n                        error,\n                    });\n                }\n            };\n            callAuthProvider();\n        } else {\n            setState({\n                isLoading: false,\n                identity: defaultIdentity,\n            });\n        }\n    }, [authProvider, setState]);\n    return state;\n};\n\ninterface State {\n    isLoading: boolean;\n    identity?: UserIdentity;\n    error?: any;\n}\n\nexport default useGetIdentity;\n"]},"metadata":{},"sourceType":"module"}