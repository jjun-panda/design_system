{"ast":null,"code":"/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport var setSubmissionErrors = function setSubmissionErrors(errors, setError) {\n  var setErrorFromArray = function setErrorFromArray(errors, rootPath) {\n    errors.forEach(function (error, index) {\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n        return;\n      }\n      if (Array.isArray(error)) {\n        setErrorFromArray(error, \"\".concat(rootPath, \".\").concat(index, \".\"));\n        return;\n      }\n      setError(\"\".concat(rootPath, \".\").concat(index), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n  var setErrorFromObject = function setErrorFromObject(errors, rootPath) {\n    Object.entries(errors).forEach(function (_a) {\n      var name = _a[0],\n        error = _a[1];\n      if (typeof error === 'object') {\n        setErrorFromObject(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n      if (Array.isArray(error)) {\n        setErrorFromArray(error, \"\".concat(rootPath).concat(name, \".\"));\n        return;\n      }\n      setError(\"\".concat(rootPath).concat(name), {\n        type: 'server',\n        message: error.toString()\n      });\n    });\n  };\n  setErrorFromObject(errors, '');\n};","map":{"version":3,"mappings":"AAEA;;;;;;;;;;;;;;;;;;;AAmBA,OAAO,IAAMA,mBAAmB,GAAG,SAAtBA,mBAAmB,CAC5BC,MAAmB,EACnBC,QAAsC;EAEtC,IAAMC,iBAAiB,GAAG,SAApBA,iBAAiB,CAAIF,MAAa,EAAEG,QAAgB;IACtDH,MAAM,CAACI,OAAO,CAAC,UAACC,KAAK,EAAEC,KAAK;MACxB,IAAI,OAAOD,KAAK,KAAK,QAAQ,EAAE;QAC3BE,kBAAkB,CAACF,KAAK,EAAE,UAAGF,QAAQ,cAAIG,KAAK,MAAG,CAAC;QAClD;;MAEJ,IAAIE,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACtBH,iBAAiB,CAACG,KAAK,EAAE,UAAGF,QAAQ,cAAIG,KAAK,MAAG,CAAC;QACjD;;MAEJL,QAAQ,CAAC,UAAGE,QAAQ,cAAIG,KAAK,CAAE,EAAE;QAC7BI,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEN,KAAK,CAACO,QAAQ;OAC1B,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACD,IAAML,kBAAkB,GAAG,SAArBA,kBAAkB,CAAIP,MAAmB,EAAEG,QAAgB;IAC7DU,MAAM,CAACC,OAAO,CAACd,MAAM,CAAC,CAACI,OAAO,CAAC,UAACW,EAAa;UAAZC,IAAI;QAAEX,KAAK;MACxC,IAAI,OAAOA,KAAK,KAAK,QAAQ,EAAE;QAC3BE,kBAAkB,CAACF,KAAK,EAAE,UAAGF,QAAQ,SAAGa,IAAI,MAAG,CAAC;QAChD;;MAEJ,IAAIR,KAAK,CAACC,OAAO,CAACJ,KAAK,CAAC,EAAE;QACtBH,iBAAiB,CAACG,KAAK,EAAE,UAAGF,QAAQ,SAAGa,IAAI,MAAG,CAAC;QAC/C;;MAEJf,QAAQ,CAAC,UAAGE,QAAQ,SAAGa,IAAI,CAAE,EAAE;QAC3BN,IAAI,EAAE,QAAQ;QACdC,OAAO,EAAEN,KAAK,CAACO,QAAQ;OAC1B,CAAC;IACN,CAAC,CAAC;EACN,CAAC;EACDL,kBAAkB,CAACP,MAAM,EAAE,EAAE,CAAC;AAClC,CAAC","names":["setSubmissionErrors","errors","setError","setErrorFromArray","rootPath","forEach","error","index","setErrorFromObject","Array","isArray","type","message","toString","Object","entries","_a","name"],"sources":["/Users/jjun/design_system/node_modules/ra-core/src/form/setSubmissionErrors.ts"],"sourcesContent":["import { FieldValues, UseFormSetError } from 'react-hook-form';\n\n/**\n * This internal function is used to convert an object matching the form shape with errors to a\n * format compatible with react-hook-form. It's used to handle submission errors. Only useful when\n * you are implementing a custom form without leveraging our Form component.\n *\n * @example\n * const MyForm = () => {\n *     const { register, handleSubmit, setError } = useForm();\n *     const onSubmit = data => {\n *         return saveAsync(data).catch(error => setSubmissionErrors(error.body.details));\n *     };\n *\n *     return (\n *         <form onSubmit={handleSubmit(onSubmit)}>\n *             ...\n *         </form>\n *     );\n * };\n */\nexport const setSubmissionErrors = (\n    errors: FieldValues,\n    setError: UseFormSetError<FieldValues>\n) => {\n    const setErrorFromArray = (errors: any[], rootPath: string) => {\n        errors.forEach((error, index) => {\n            if (typeof error === 'object') {\n                setErrorFromObject(error, `${rootPath}.${index}.`);\n                return;\n            }\n            if (Array.isArray(error)) {\n                setErrorFromArray(error, `${rootPath}.${index}.`);\n                return;\n            }\n            setError(`${rootPath}.${index}`, {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    const setErrorFromObject = (errors: FieldValues, rootPath: string) => {\n        Object.entries(errors).forEach(([name, error]) => {\n            if (typeof error === 'object') {\n                setErrorFromObject(error, `${rootPath}${name}.`);\n                return;\n            }\n            if (Array.isArray(error)) {\n                setErrorFromArray(error, `${rootPath}${name}.`);\n                return;\n            }\n            setError(`${rootPath}${name}`, {\n                type: 'server',\n                message: error.toString(),\n            });\n        });\n    };\n    setErrorFromObject(errors, '');\n};\n"]},"metadata":{},"sourceType":"module"}