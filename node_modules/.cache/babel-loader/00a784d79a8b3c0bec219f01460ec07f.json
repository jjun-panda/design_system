{"ast":null,"code":"import * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport { Box, Button, Popover, useMediaQuery, Tooltip, IconButton } from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\nimport { FieldEditor } from './FieldEditor';\nimport { styled } from '@mui/material/styles';\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\nexport var SelectColumnsButton = function (props) {\n  var resource = useResourceContext(props);\n  var preferenceKey = props.preferenceKey || \"preferences.\".concat(resource, \".datagrid\");\n  var _a = React.useState(null),\n    anchorEl = _a[0],\n    setAnchorEl = _a[1];\n  var availableColumns = useStore(\"\".concat(preferenceKey, \".availableColumns\"), [])[0];\n  var omit = useStore(\"\".concat(preferenceKey, \".omit\"), [])[0];\n  var _b = useStore(\"\".concat(preferenceKey, \".columns\"), availableColumns.filter(function (column) {\n      return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source));\n    }).map(function (column) {\n      return column.index;\n    })),\n    columns = _b[0],\n    setColumns = _b[1];\n  var translate = useTranslate();\n  var isXSmall = useMediaQuery(function (theme) {\n    return theme.breakpoints.down('sm');\n  });\n  var title = translate('ra.action.select_columns', {\n    _: 'Columns'\n  });\n  var handleClick = function (event) {\n    setAnchorEl(event.currentTarget);\n  };\n  var handleClose = function () {\n    setAnchorEl(null);\n  };\n  var handleToggle = function (event) {\n    if (event.target.checked) {\n      // add the column at the right position\n      setColumns(availableColumns.filter(function (column) {\n        return column.index === event.target.name || columns.includes(column.index);\n      }).map(function (column) {\n        return column.index;\n      }));\n    } else {\n      setColumns(columns.filter(function (index) {\n        return index !== event.target.name;\n      }));\n    }\n  };\n  return React.createElement(React.Fragment, null, isXSmall ? React.createElement(Tooltip, {\n    title: title\n  }, React.createElement(IconButton, {\n    \"aria-label\": title,\n    color: \"primary\",\n    onClick: handleClick,\n    size: \"large\"\n  }, React.createElement(ViewWeekIcon, null))) : React.createElement(StyledButton, {\n    size: \"small\",\n    onClick: handleClick,\n    startIcon: React.createElement(ViewWeekIcon, null)\n  }, title), React.createElement(Popover, {\n    open: Boolean(anchorEl),\n    anchorEl: anchorEl,\n    onClose: handleClose,\n    anchorOrigin: {\n      vertical: 'bottom',\n      horizontal: 'center'\n    },\n    transformOrigin: {\n      vertical: 'top',\n      horizontal: 'center'\n    }\n  }, React.createElement(Box, {\n    p: 1\n  }, availableColumns.map(function (column) {\n    return React.createElement(FieldEditor, {\n      key: column.index,\n      source: column.source,\n      label: column.label,\n      index: column.index,\n      selected: columns.includes(column.index),\n      onToggle: handleToggle\n    });\n  }))));\n};\nvar StyledButton = styled(Button, {\n  name: 'RaSelectColumnsButton',\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})({\n  '&.MuiButton-sizeSmall': {\n    // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n    lineHeight: 1.5\n  }\n});","map":{"version":3,"mappings":"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","names":["React","useStore","useTranslate","useResourceContext","Box","Button","Popover","useMediaQuery","Tooltip","IconButton","ViewWeekIcon","FieldEditor","styled","SelectColumnsButton","resource","props","preferenceKey","useState","anchorEl","setAnchorEl","availableColumns","filter","omit","includes","column","source","map","index","columns","setColumns","translate","isXSmall","theme","breakpoints","down","title","_","handleClick","event","currentTarget","handleClose","handleToggle","target","checked","name","color","onClick","size","StyledButton","startIcon","open","Boolean","onClose","anchorOrigin","vertical","horizontal","transformOrigin","p","key","label","selected","onToggle","overridesResolver","styles","root","lineHeight"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/list/datagrid/SelectColumnsButton.tsx"],"sourcesContent":["import * as React from 'react';\nimport { useStore, useTranslate, useResourceContext } from 'ra-core';\nimport {\n    Box,\n    Button,\n    Popover,\n    useMediaQuery,\n    Theme,\n    Tooltip,\n    IconButton,\n} from '@mui/material';\nimport ViewWeekIcon from '@mui/icons-material/ViewWeek';\n\nimport { FieldEditor } from './FieldEditor';\nimport { ConfigurableDatagridColumn } from './DatagridConfigurable';\nimport { styled } from '@mui/material/styles';\n\n/**\n * Renders a button that lets users show / hide columns in a configurable datagrid\n *\n * @example\n * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';\n *\n * const PostListActions = () => (\n *   <TopToolbar>\n        <SelectColumnsButton />\n        <FilterButton />\n *   </TopToolbar>\n * );\n *\n * const PostList = () => (\n *   <List actions={<PostListActions />}>\n *     <DatagridConfigurable>\n *       <TextField source=\"title\" />\n *       <TextField source=\"author\" />\n         ...\n *     </DatagridConfigurable>\n *   </List>\n * );\n */\nexport const SelectColumnsButton = props => {\n    const resource = useResourceContext(props);\n    const preferenceKey =\n        props.preferenceKey || `preferences.${resource}.datagrid`;\n    const [anchorEl, setAnchorEl] = React.useState(null);\n    const [availableColumns] = useStore<ConfigurableDatagridColumn[]>(\n        `${preferenceKey}.availableColumns`,\n        []\n    );\n    const [omit] = useStore<string[]>(`${preferenceKey}.omit`, []);\n    const [columns, setColumns] = useStore<string[]>(\n        `${preferenceKey}.columns`,\n        availableColumns\n            .filter(column => !omit?.includes(column.source))\n            .map(column => column.index)\n    );\n    const translate = useTranslate();\n    const isXSmall = useMediaQuery((theme: Theme) =>\n        theme.breakpoints.down('sm')\n    );\n\n    const title = translate('ra.action.select_columns', { _: 'Columns' });\n\n    const handleClick = (event): void => {\n        setAnchorEl(event.currentTarget);\n    };\n\n    const handleClose = (): void => {\n        setAnchorEl(null);\n    };\n\n    const handleToggle = event => {\n        if (event.target.checked) {\n            // add the column at the right position\n            setColumns(\n                availableColumns\n                    .filter(\n                        column =>\n                            column.index === event.target.name ||\n                            columns.includes(column.index)\n                    )\n                    .map(column => column.index)\n            );\n        } else {\n            setColumns(columns.filter(index => index !== event.target.name));\n        }\n    };\n\n    return (\n        <>\n            {isXSmall ? (\n                <Tooltip title={title}>\n                    <IconButton\n                        aria-label={title}\n                        color=\"primary\"\n                        onClick={handleClick}\n                        size=\"large\"\n                    >\n                        <ViewWeekIcon />\n                    </IconButton>\n                </Tooltip>\n            ) : (\n                <StyledButton\n                    size=\"small\"\n                    onClick={handleClick}\n                    startIcon={<ViewWeekIcon />}\n                >\n                    {title}\n                </StyledButton>\n            )}\n            <Popover\n                open={Boolean(anchorEl)}\n                anchorEl={anchorEl}\n                onClose={handleClose}\n                anchorOrigin={{\n                    vertical: 'bottom',\n                    horizontal: 'center',\n                }}\n                transformOrigin={{\n                    vertical: 'top',\n                    horizontal: 'center',\n                }}\n            >\n                <Box p={1}>\n                    {availableColumns.map(column => (\n                        <FieldEditor\n                            key={column.index}\n                            source={column.source}\n                            label={column.label}\n                            index={column.index}\n                            selected={columns.includes(column.index)}\n                            onToggle={handleToggle}\n                        />\n                    ))}\n                </Box>\n            </Popover>\n        </>\n    );\n};\n\nconst StyledButton = styled(Button, {\n    name: 'RaSelectColumnsButton',\n    overridesResolver: (props, styles) => styles.root,\n})({\n    '&.MuiButton-sizeSmall': {\n        // fix for icon misalignment on small buttons, see https://github.com/mui/material-ui/pull/30240\n        lineHeight: 1.5,\n    },\n});\n\nexport interface SelectColumnsButtonProps {\n    preferenceKey: string;\n}\n"]},"metadata":{},"sourceType":"module"}