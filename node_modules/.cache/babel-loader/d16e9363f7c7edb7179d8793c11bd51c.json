{"ast":null,"code":"var __rest = this && this.__rest || function (s, e) {\n  var t = {};\n  for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];\n  if (s != null && typeof Object.getOwnPropertySymbols === \"function\") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {\n    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];\n  }\n  return t;\n};\nimport * as React from 'react';\nimport { Children, cloneElement, useCallback, useMemo, useRef } from 'react';\nimport { styled } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { FormDataConsumer, useRecordContext } from 'ra-core';\nimport { useArrayInput } from './useArrayInput';\nimport { SimpleFormIteratorClasses, SimpleFormIteratorPrefix } from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport { SimpleFormIteratorItem } from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\nexport var SimpleFormIterator = function (props) {\n  var _a = props.addButton,\n    addButton = _a === void 0 ? React.createElement(DefaultAddItemButton, null) : _a,\n    _b = props.removeButton,\n    removeButton = _b === void 0 ? React.createElement(DefaultRemoveItemButton, null) : _b,\n    _c = props.reOrderButtons,\n    reOrderButtons = _c === void 0 ? React.createElement(DefaultReOrderButtons, null) : _c,\n    children = props.children,\n    className = props.className,\n    resource = props.resource,\n    source = props.source,\n    disabled = props.disabled,\n    disableAdd = props.disableAdd,\n    disableRemove = props.disableRemove,\n    disableReordering = props.disableReordering,\n    inline = props.inline,\n    _d = props.getItemLabel,\n    getItemLabel = _d === void 0 ? false : _d,\n    fullWidth = props.fullWidth,\n    sx = props.sx;\n  var _e = useArrayInput(props),\n    append = _e.append,\n    fields = _e.fields,\n    move = _e.move,\n    remove = _e.remove;\n  var record = useRecordContext(props);\n  var initialDefaultValue = useRef({});\n  var removeField = useCallback(function (index) {\n    remove(index);\n  }, [remove]);\n  if (fields.length > 0) {\n    var _f = fields[0],\n      id = _f.id,\n      rest = __rest(_f, [\"id\"]);\n    initialDefaultValue.current = rest;\n    for (var k in initialDefaultValue.current) initialDefaultValue.current[k] = '';\n  }\n  var addField = useCallback(function (item) {\n    if (item === void 0) {\n      item = undefined;\n    }\n    var defaultValue = item;\n    if (item == null) {\n      defaultValue = initialDefaultValue.current;\n      if (Children.count(children) === 1 && React.isValidElement(Children.only(children)) &&\n      // @ts-ignore\n      !Children.only(children).props.source) {\n        // ArrayInput used for an array of scalar values\n        // (e.g. tags: ['foo', 'bar'])\n        defaultValue = '';\n      } else {\n        // ArrayInput used for an array of objects\n        // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n        defaultValue = defaultValue || {};\n        Children.forEach(children, function (input) {\n          var _a;\n          if (React.isValidElement(input) && input.type !== FormDataConsumer && input.props.source) {\n            defaultValue[input.props.source] = (_a = input.props.defaultValue) !== null && _a !== void 0 ? _a : '';\n          }\n        });\n      }\n    }\n    append(defaultValue);\n  }, [append, children]);\n  // add field and call the onClick event of the button passed as addButton prop\n  var handleAddButtonClick = function (originalOnClickHandler) {\n    return function (event) {\n      addField();\n      if (originalOnClickHandler) {\n        originalOnClickHandler(event);\n      }\n    };\n  };\n  var handleReorder = useCallback(function (origin, destination) {\n    move(origin, destination);\n  }, [move]);\n  var records = get(record, source);\n  var context = useMemo(function () {\n    return {\n      total: fields.length,\n      add: addField,\n      remove: removeField,\n      reOrder: handleReorder,\n      source: source\n    };\n  }, [addField, fields.length, handleReorder, removeField, source]);\n  return fields ? React.createElement(SimpleFormIteratorContext.Provider, {\n    value: context\n  }, React.createElement(Root, {\n    className: clsx(className, fullWidth && 'fullwidth', disabled && 'disabled'),\n    sx: sx\n  }, React.createElement(\"ul\", {\n    className: SimpleFormIteratorClasses.list\n  }, fields.map(function (member, index) {\n    return React.createElement(SimpleFormIteratorItem, {\n      key: member.id,\n      disabled: disabled,\n      disableRemove: disableRemove,\n      disableReordering: disableReordering,\n      fields: fields,\n      getItemLabel: getItemLabel,\n      index: index,\n      member: \"\".concat(source, \".\").concat(index),\n      onRemoveField: removeField,\n      onReorder: handleReorder,\n      record: records && records[index] || {},\n      removeButton: removeButton,\n      reOrderButtons: reOrderButtons,\n      resource: resource,\n      source: source,\n      inline: inline\n    }, children);\n  })), !disabled && !disableAdd && React.createElement(\"div\", {\n    className: SimpleFormIteratorClasses.add\n  }, cloneElement(addButton, {\n    className: clsx('button-add', \"button-add-\".concat(source)),\n    onClick: handleAddButtonClick(addButton.props.onClick)\n  })))) : null;\n};\nSimpleFormIterator.defaultProps = {\n  disableAdd: false,\n  disableRemove: false\n};\nSimpleFormIterator.propTypes = {\n  addButton: PropTypes.element,\n  removeButton: PropTypes.element,\n  children: PropTypes.node,\n  className: PropTypes.string,\n  field: PropTypes.object,\n  fields: PropTypes.array,\n  fieldState: PropTypes.object,\n  formState: PropTypes.object,\n  fullWidth: PropTypes.bool,\n  inline: PropTypes.bool,\n  record: PropTypes.object,\n  source: PropTypes.string,\n  resource: PropTypes.string,\n  translate: PropTypes.func,\n  disableAdd: PropTypes.bool,\n  disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n  TransitionProps: PropTypes.shape({})\n};\nvar Root = styled('div', {\n  name: SimpleFormIteratorPrefix,\n  overridesResolver: function (props, styles) {\n    return styles.root;\n  }\n})(function (_a) {\n  var _b, _c, _d;\n  var theme = _a.theme;\n  return _b = {\n    '& > ul': {\n      padding: 0,\n      marginTop: 0,\n      marginBottom: 0\n    },\n    '& > ul > li:last-child': {\n      // hide the last separator\n      borderBottom: 'none'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line)] = (_c = {\n    display: 'flex',\n    listStyleType: 'none',\n    borderBottom: \"solid 1px \".concat(theme.palette.divider)\n  }, _c[theme.breakpoints.down('sm')] = {\n    display: 'block'\n  }, _c), _b[\"& .\".concat(SimpleFormIteratorClasses.index)] = (_d = {\n    display: 'flex',\n    alignItems: 'top',\n    marginRight: theme.spacing(1),\n    marginTop: theme.spacing(1)\n  }, _d[theme.breakpoints.down('md')] = {\n    display: 'none'\n  }, _d), _b[\"& .\".concat(SimpleFormIteratorClasses.form)] = {\n    alignItems: 'flex-start',\n    display: 'flex',\n    flexDirection: 'column'\n  }, _b[\"&.fullwidth > ul > li > .\".concat(SimpleFormIteratorClasses.form)] = {\n    flex: 2\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.inline)] = {\n    flexDirection: 'row',\n    columnGap: '1em',\n    flexWrap: 'wrap'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.action)] = {\n    marginTop: theme.spacing(0.5),\n    visibility: 'hidden',\n    '@media(hover:none)': {\n      visibility: 'visible'\n    }\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.add)] = {\n    borderBottom: 'none'\n  }, _b[\"& .\".concat(SimpleFormIteratorClasses.line, \":hover > .\").concat(SimpleFormIteratorClasses.action)] = {\n    visibility: 'visible'\n  }, _b;\n});","map":{"version":3,"mappings":"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","names":["React","Children","cloneElement","useCallback","useMemo","useRef","styled","clsx","get","PropTypes","FormDataConsumer","useRecordContext","useArrayInput","SimpleFormIteratorClasses","SimpleFormIteratorPrefix","SimpleFormIteratorContext","SimpleFormIteratorItem","AddItemButton","DefaultAddItemButton","RemoveItemButton","DefaultRemoveItemButton","ReOrderButtons","DefaultReOrderButtons","SimpleFormIterator","props","addButton","_b","removeButton","_c","reOrderButtons","children","className","resource","source","disabled","disableAdd","disableRemove","disableReordering","inline","_d","getItemLabel","fullWidth","sx","append","fields","move","remove","record","initialDefaultValue","removeField","index","length","_f","id","rest","current","k","addField","item","defaultValue","count","isValidElement","only","forEach","input","type","handleAddButtonClick","originalOnClickHandler","event","handleReorder","origin","destination","records","context","total","add","reOrder","Provider","value","Root","list","map","member","key","onRemoveField","onReorder","onClick","defaultProps","propTypes","element","node","string","field","object","array","fieldState","formState","bool","translate","func","oneOfType","TransitionProps","shape","name","overridesResolver","styles","root","_a","theme","padding","marginTop","marginBottom","borderBottom","line","display","listStyleType","palette","divider","breakpoints","down","alignItems","marginRight","spacing","form","flexDirection","flex","columnGap","flexWrap","action","visibility"],"sources":["/Users/jjun/design_system/node_modules/ra-ui-materialui/src/input/ArrayInput/SimpleFormIterator.tsx"],"sourcesContent":["import * as React from 'react';\nimport {\n    Children,\n    cloneElement,\n    MouseEvent,\n    MouseEventHandler,\n    ReactElement,\n    ReactNode,\n    useCallback,\n    useMemo,\n    useRef,\n} from 'react';\nimport { styled, SxProps } from '@mui/material';\nimport clsx from 'clsx';\nimport get from 'lodash/get';\nimport PropTypes from 'prop-types';\nimport { FormDataConsumer, RaRecord, useRecordContext } from 'ra-core';\nimport { UseFieldArrayReturn } from 'react-hook-form';\n\nimport { useArrayInput } from './useArrayInput';\nimport {\n    SimpleFormIteratorClasses,\n    SimpleFormIteratorPrefix,\n} from './useSimpleFormIteratorStyles';\nimport { SimpleFormIteratorContext } from './SimpleFormIteratorContext';\nimport {\n    DisableRemoveFunction,\n    SimpleFormIteratorItem,\n} from './SimpleFormIteratorItem';\nimport { AddItemButton as DefaultAddItemButton } from './AddItemButton';\nimport { RemoveItemButton as DefaultRemoveItemButton } from './RemoveItemButton';\nimport { ReOrderButtons as DefaultReOrderButtons } from './ReOrderButtons';\n\nexport const SimpleFormIterator = (props: SimpleFormIteratorProps) => {\n    const {\n        addButton = <DefaultAddItemButton />,\n        removeButton = <DefaultRemoveItemButton />,\n        reOrderButtons = <DefaultReOrderButtons />,\n        children,\n        className,\n        resource,\n        source,\n        disabled,\n        disableAdd,\n        disableRemove,\n        disableReordering,\n        inline,\n        getItemLabel = false,\n        fullWidth,\n        sx,\n    } = props;\n    const { append, fields, move, remove } = useArrayInput(props);\n    const record = useRecordContext(props);\n    const initialDefaultValue = useRef({});\n\n    const removeField = useCallback(\n        (index: number) => {\n            remove(index);\n        },\n        [remove]\n    );\n\n    if (fields.length > 0) {\n        const { id, ...rest } = fields[0];\n        initialDefaultValue.current = rest;\n        for (const k in initialDefaultValue.current)\n            initialDefaultValue.current[k] = '';\n    }\n\n    const addField = useCallback(\n        (item: any = undefined) => {\n            let defaultValue = item;\n            if (item == null) {\n                defaultValue = initialDefaultValue.current;\n                if (\n                    Children.count(children) === 1 &&\n                    React.isValidElement(Children.only(children)) &&\n                    // @ts-ignore\n                    !Children.only(children).props.source\n                ) {\n                    // ArrayInput used for an array of scalar values\n                    // (e.g. tags: ['foo', 'bar'])\n                    defaultValue = '';\n                } else {\n                    // ArrayInput used for an array of objects\n                    // (e.g. authors: [{ firstName: 'John', lastName: 'Doe' }, { firstName: 'Jane', lastName: 'Doe' }])\n                    defaultValue =\n                        defaultValue || ({} as Record<string, unknown>);\n                    Children.forEach(children, input => {\n                        if (\n                            React.isValidElement(input) &&\n                            input.type !== FormDataConsumer &&\n                            input.props.source\n                        ) {\n                            defaultValue[input.props.source] =\n                                input.props.defaultValue ?? '';\n                        }\n                    });\n                }\n            }\n            append(defaultValue);\n        },\n        [append, children]\n    );\n\n    // add field and call the onClick event of the button passed as addButton prop\n    const handleAddButtonClick = (\n        originalOnClickHandler: MouseEventHandler\n    ) => (event: MouseEvent) => {\n        addField();\n        if (originalOnClickHandler) {\n            originalOnClickHandler(event);\n        }\n    };\n\n    const handleReorder = useCallback(\n        (origin: number, destination: number) => {\n            move(origin, destination);\n        },\n        [move]\n    );\n\n    const records = get(record, source);\n\n    const context = useMemo(\n        () => ({\n            total: fields.length,\n            add: addField,\n            remove: removeField,\n            reOrder: handleReorder,\n            source,\n        }),\n        [addField, fields.length, handleReorder, removeField, source]\n    );\n    return fields ? (\n        <SimpleFormIteratorContext.Provider value={context}>\n            <Root\n                className={clsx(\n                    className,\n                    fullWidth && 'fullwidth',\n                    disabled && 'disabled'\n                )}\n                sx={sx}\n            >\n                <ul className={SimpleFormIteratorClasses.list}>\n                    {fields.map((member, index) => (\n                        <SimpleFormIteratorItem\n                            key={member.id}\n                            disabled={disabled}\n                            disableRemove={disableRemove}\n                            disableReordering={disableReordering}\n                            fields={fields}\n                            getItemLabel={getItemLabel}\n                            index={index}\n                            member={`${source}.${index}`}\n                            onRemoveField={removeField}\n                            onReorder={handleReorder}\n                            record={(records && records[index]) || {}}\n                            removeButton={removeButton}\n                            reOrderButtons={reOrderButtons}\n                            resource={resource}\n                            source={source}\n                            inline={inline}\n                        >\n                            {children}\n                        </SimpleFormIteratorItem>\n                    ))}\n                </ul>\n                {!disabled && !disableAdd && (\n                    <div className={SimpleFormIteratorClasses.add}>\n                        {cloneElement(addButton, {\n                            className: clsx(\n                                'button-add',\n                                `button-add-${source}`\n                            ),\n                            onClick: handleAddButtonClick(\n                                addButton.props.onClick\n                            ),\n                        })}\n                    </div>\n                )}\n            </Root>\n        </SimpleFormIteratorContext.Provider>\n    ) : null;\n};\n\nSimpleFormIterator.defaultProps = {\n    disableAdd: false,\n    disableRemove: false,\n};\n\nSimpleFormIterator.propTypes = {\n    addButton: PropTypes.element,\n    removeButton: PropTypes.element,\n    children: PropTypes.node,\n    className: PropTypes.string,\n    field: PropTypes.object,\n    fields: PropTypes.array,\n    fieldState: PropTypes.object,\n    formState: PropTypes.object,\n    fullWidth: PropTypes.bool,\n    inline: PropTypes.bool,\n    record: PropTypes.object,\n    source: PropTypes.string,\n    resource: PropTypes.string,\n    translate: PropTypes.func,\n    disableAdd: PropTypes.bool,\n    disableRemove: PropTypes.oneOfType([PropTypes.func, PropTypes.bool]),\n    TransitionProps: PropTypes.shape({}),\n};\n\ntype GetItemLabelFunc = (index: number) => string | ReactElement;\n\nexport interface SimpleFormIteratorProps extends Partial<UseFieldArrayReturn> {\n    addButton?: ReactElement;\n    children?: ReactNode;\n    className?: string;\n    disabled?: boolean;\n    disableAdd?: boolean;\n    disableRemove?: boolean | DisableRemoveFunction;\n    disableReordering?: boolean;\n    fullWidth?: boolean;\n    getItemLabel?: boolean | GetItemLabelFunc;\n    inline?: boolean;\n    meta?: {\n        // the type defined in FieldArrayRenderProps says error is boolean, which is wrong.\n        error?: any;\n        submitFailed?: boolean;\n    };\n    record?: RaRecord;\n    removeButton?: ReactElement;\n    reOrderButtons?: ReactElement;\n    resource?: string;\n    source?: string;\n    sx?: SxProps;\n}\n\nconst Root = styled('div', {\n    name: SimpleFormIteratorPrefix,\n    overridesResolver: (props, styles) => styles.root,\n})(({ theme }) => ({\n    '& > ul': {\n        padding: 0,\n        marginTop: 0,\n        marginBottom: 0,\n    },\n    '& > ul > li:last-child': {\n        // hide the last separator\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}`]: {\n        display: 'flex',\n        listStyleType: 'none',\n        borderBottom: `solid 1px ${theme.palette.divider}`,\n        [theme.breakpoints.down('sm')]: { display: 'block' },\n    },\n    [`& .${SimpleFormIteratorClasses.index}`]: {\n        display: 'flex',\n        alignItems: 'top',\n        marginRight: theme.spacing(1),\n        marginTop: theme.spacing(1),\n        [theme.breakpoints.down('md')]: { display: 'none' },\n    },\n    [`& .${SimpleFormIteratorClasses.form}`]: {\n        alignItems: 'flex-start',\n        display: 'flex',\n        flexDirection: 'column',\n    },\n    [`&.fullwidth > ul > li > .${SimpleFormIteratorClasses.form}`]: {\n        flex: 2,\n    },\n    [`& .${SimpleFormIteratorClasses.inline}`]: {\n        flexDirection: 'row',\n        columnGap: '1em',\n        flexWrap: 'wrap',\n    },\n    [`& .${SimpleFormIteratorClasses.action}`]: {\n        marginTop: theme.spacing(0.5),\n        visibility: 'hidden',\n        '@media(hover:none)': {\n            visibility: 'visible',\n        },\n    },\n    [`& .${SimpleFormIteratorClasses.add}`]: {\n        borderBottom: 'none',\n    },\n    [`& .${SimpleFormIteratorClasses.line}:hover > .${SimpleFormIteratorClasses.action}`]: {\n        visibility: 'visible',\n    },\n}));\n"]},"metadata":{},"sourceType":"module"}