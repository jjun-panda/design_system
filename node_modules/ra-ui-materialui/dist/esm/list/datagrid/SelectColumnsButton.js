import * as React from 'react';
import { useStore, useTranslate, useResourceContext } from 'ra-core';
import { Box, Button, Popover } from '@mui/material';
import ViewWeekIcon from '@mui/icons-material/ViewWeek';
import { FieldEditor } from './FieldEditor';
/**
 * Render s a button that lets users show / hide columns in a configurable datagrid
 *
 * @example
 * import { SelectColumnsButton, DatagridConfigurable } from 'react-admin';
 *
 * const PostListActions = () => (
 *   <TopToolbar>
        <SelectColumnsButton />
        <FilterButton />
 *   </TopToolbar>
 * );
 *
 * const PostList = () => (
 *   <List actions={<PostListActions />}>
 *     <DatagridConfigurable>
 *       <TextField source="title" />
 *       <TextField source="author" />
         ...
 *     </DatagridConfigurable>
 *   </List>
 * );
 */
export var SelectColumnsButton = function (props) {
    var resource = useResourceContext(props);
    var preferenceKey = props.preferenceKey || "preferences.".concat(resource, ".datagrid");
    var _a = React.useState(null), anchorEl = _a[0], setAnchorEl = _a[1];
    var availableColumns = useStore("".concat(preferenceKey, ".availableColumns"), [])[0];
    var omit = useStore("".concat(preferenceKey, ".omit"), [])[0];
    var _b = useStore("".concat(preferenceKey, ".columns"), availableColumns
        .filter(function (column) { return !(omit === null || omit === void 0 ? void 0 : omit.includes(column.source)); })
        .map(function (column) { return column.index; })), columns = _b[0], setColumns = _b[1];
    var translate = useTranslate();
    var handleClick = function (event) {
        setAnchorEl(event.currentTarget);
    };
    var handleClose = function () {
        setAnchorEl(null);
    };
    var handleToggle = function (event) {
        if (event.target.checked) {
            // add the column at the right position
            setColumns(availableColumns
                .filter(function (column) {
                return column.index === event.target.name ||
                    columns.includes(column.index);
            })
                .map(function (column) { return column.index; }));
        }
        else {
            setColumns(columns.filter(function (index) { return index !== event.target.name; }));
        }
    };
    return (React.createElement(React.Fragment, null,
        React.createElement(Button, { size: "small", onClick: handleClick, startIcon: React.createElement(ViewWeekIcon, null), sx: { '&.MuiButton-sizeSmall': { lineHeight: 1.5 } } }, translate('ra.action.select_columns', { _: 'Columns' })),
        React.createElement(Popover, { open: Boolean(anchorEl), anchorEl: anchorEl, onClose: handleClose, anchorOrigin: {
                vertical: 'bottom',
                horizontal: 'center',
            }, transformOrigin: {
                vertical: 'top',
                horizontal: 'center',
            } },
            React.createElement(Box, { p: 1 }, availableColumns.map(function (column) { return (React.createElement(FieldEditor, { key: column.index, source: column.source, label: column.label, index: column.index, selected: columns.includes(column.index), onToggle: handleToggle })); })))));
};
//# sourceMappingURL=SelectColumnsButton.js.map